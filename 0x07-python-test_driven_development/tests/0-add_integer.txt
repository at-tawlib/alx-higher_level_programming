Test Cases for 0-add_integer module
===================================
The module takes two integers or floats as arguments and returns their sum

Usage
=====

Add import for the module
	>>> add_integer = __import__('0-add_integer').add_integer

Passing two positive integers as arguments
	>>> add_integer(1, 1)
	2

Passing one positive and one negative integer as arguments
	>>> add_integer(1, -1)
	0

Passing two negative integers as arguments
	>>> add_integer(-3, -2)
	-5

Passing only one integer, with the second  as the default
	>>> add_integer(2)
	100

Passing a positive float and positive integer
	>>> add_integer(3.5, 5)
	8

Passing only one parameter which is a positive float
	>>> add_integer(5.5)
	103

Passing a positive float and a negative integer arguments
	>>> add_integer(10.5, -2)
	8

Passing two negative floats as arguments
	>>> add_integer(-1.5, -2.5)
	-3

Passing an integer and a string as arguments
	>>> add_integer(5, "Hello")
	Traceback (most recent call last):
			...
	TypeError: b must be an integer

Passing no argument
	>>> add_integer(None)
	Traceback (most recent call last):
			...
	TypeError: a must be an integer

Passing a letter and a number as arguments
	>>> add_integer(6, 'a')
	Traceback (most recent call last):
			...
	TypeError: b must be an integer

Passing two letters as arguments
	>>> add_integer('a', 'b')
	Traceback (most recent call last):
			...
	TypeError: a must be an integer

Passing a tuple as argument
	>>> add_integer((1, 3))
	Traceback (most recent call last):
			...
	TypeError: a must be an integer

Passing a number and a list as arguments
	>>> add_integer(9, [])
	Traceback (most recent call last):
			...
	TypeError: b must be an integer

Passing only one string as argument
	>>> add_integer("hello")
	Traceback (most recent call last):
			...
	TypeError: a must be an integer
	
Adding two floats
	>>> add_integer(3.6, 1.4)
	4

Checking case overflow
	>>> add_integer(float('inf'), 0)
	Traceback (most recent call last):
			...
	OverflowError: cannot convert float infinity to integer

Checking case overflow 2
	>>> add_integer(float('inf'), float('-inf'))
	Traceback (most recent call last):
			...
	OverflowError: cannot convert float infinity to integer

Case NaN 1:
	>>> add_integer(0, float('nan'))
	Traceback (most recent call last):
			...
	ValueError: cannot convert float NaN to integer

Case NaN 2:
	>>> add_integer(float('nan'))
	Traceback (most recent call last):
			...
	ValueError: cannot convert float NaN to integer
